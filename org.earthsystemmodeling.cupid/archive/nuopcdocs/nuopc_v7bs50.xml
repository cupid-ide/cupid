<!DOCTYPE doc [
<!ENTITY refurl "file:///home/rocky/git/cupid/nuopcdocs/_build/html/generic.html">
]>

<docs>

	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>NUOPC Driver</h1>
				<hr />
				<p>
				Driver component that drives Model, Mediator, and Connector components. The default is to use explicit time stepping. For every Driver time step the same sequence of Connector, Model, and Mediator Run methods are called. The run sequence is fully customizable.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.SetServicesCodeConcept">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>SetServices</h1>
				<h2>(Required, Implementor Provided)</h2>
				<hr />
				<p>
				All ESMF-based Components (including NUOPC Components) must define a <code>SetServices()</code> method. Within NUOPC Components, the SetServices subroutine is used to define which generic Component is being extended (i.e., Driver, Model, Mediator, or Connector), to register entry points, and to register specialization methods.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<!-- 
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.Initialization">
	<![CDATA[
	
	<b>Initialize</b><hr/>

			<UL>
		<LI>phase 0: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
		  
		<UL>
		<LI>Initialize the <TT>InitializePhaseMap</TT> Attribute according to the NUOPC Initialize Phase Definition (IPD) version 00 (see section 2.4.2 for a precise definition), with the following mapping:
		    
		<UL>
		<LI>IPDv00p1 = phase 1: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
		    
		</LI>
		</UL>
		</LI>
		</UL>  
		</LI>
		<LI>phase 1: (NUOPC P<SMALL>ROVIDED</SMALL>, suitable for: IPDv00p1)
		  
		<UL>
		<LI>Allocate and initialize the internal state.
		</LI>
		<LI>If the internal clock is not yet set, set the default internal clock to be a copy of the incoming clock, if the incoming clock is valid.
		</LI>
		<LI><I>Required specialization</I> to set number of Model+Mediator components, <TT>modelCount</TT>, in the internal state: <TT>label_SetModelCount</TT>.
		</LI>
		<LI>Allocate internal storage according to <TT>modelCount</TT>.
		</LI>
		<LI><I>Optional specialization</I> to provide Model, Mediator, and Connector <TT>petList</TT> members in the internal state: <TT>label_SetModelPetList</TT>.
		</LI>
		<LI>Create Model and Mediator components with their import and export States.
		</LI>
		<LI>Attach standard NUOPC Model Component metadata.
		</LI>
		<LI>Create Connector components.
		</LI>
		<LI>Attach standard NUOPC Connector Component metadata.
		</LI>
		<LI>Initialize the default run sequence.
		</LI>
		<LI><I>Required specialization</I> to set component services: <TT>label_SetModelServices</TT>. 
		  
		<UL>
		<LI>Call into SetServices() for all Model, Mediator, and Connector components.
		</LI>
		<LI>Optionally replace the default clock. 
		</LI>

		</UL>
		</LI>
		<LI>Execute Initialize phase=0 for all Model, Mediator, and Connector components. This is the method where each component is required to initialize its <TT>InitializePhaseMap</TT> Attribute.
		</LI>
		<LI><I>Optional specialization</I> to analyze and modify components' <TT>InitializePhaseMap</TT> Attribute before the Driver uses it: <TT>label_ModifyInitializePhaseMap</TT>.
		</LI>
		<LI>Implement the initialize sequence for the child components, compatible with up to IPD version 02, as documented in section 2.4.2.
		  
		</LI>
		</UL>
		</LI>
		</UL>	
	]]>
	</doc>
	-->
	
		
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.SetModelServices">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>SetModelServices Specialization</h1>
				<h2>(Required, Implementor Provided)</h2>
				<hr />

				<p>
					A specialization method to add Model, Mediator, and Connector child components to the Driver. The method
					<code>NUOPC_DriverAddComp()</code> is used to add child Components.
					<br/><br/>
					This method may also optionally replace the default clock.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.SetRunSequence">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>SetRunSequence Specialization</h1>
				<h2>(Optional, Implementor Provided)</h2>
				<hr />
				<p>
					A specialization method replace the default run sequence.  If not specialized, the default 
					run sequence established by the Driver is:
					<ul>
						<li>Run Connectors from Driver -> Models</li>
						<li>Run Connectors between Models</li>
						<li>Run Models</li>
						<li>Run Connectors from Models -> Driver</li>
					</ul>
					<br/>
					The method <code>NUOPC_DriverNewRunSequence()</code> is used to add a new run sequence with
					a specified number of slots.  New run sequence elements are added using <code>NUOPC_DriverAddRunElement()</code>.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.ModifyInitializePhaseMap">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>ModifyInitializePhaseMap Specialization</h1>
				<h2>(Optional, Implementor Provided)</h2>
				<hr />
				<p>
				A specialization in which the Driver can analyze and modify the <code>InitializePhaseMap</code>
				Attribute of its child Components.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	
	
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.InitPhases.InitP1">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>Initialize Phase 1</h1>
				<h2>(Required, NUOPC Provided)</h2>
				<hr />
				<p>
				<UL>
					<LI>
						If the internal clock is not yet set, set the default internal
						clock to be a copy of the incoming clock, but only if the incoming
						clock is valid.
					</LI>
					<LI>
						Call the required specialization <code>SetModelServices</code> which should
						add all child Model, Mediator, and Connector components using calls to
						<code>NUOPC_DriverAddComp()</code>.
						The specialization may optionally also replace the default clock.
					</LI>
					<LI>
						Call the optional specialization <code>SetRunSequence</code> to modify the
						default run sequence.  The default run sequence established is:
						<ul>
							<li>Run Connectors from Driver -> Models</li>
							<li>Run Connectors between Models</li>
							<li>Run Models</li>
							<li>Run Connectors from Models -> Driver</li>
						</ul>
					</LI>
					<LI>
						Execute Initialize phase=0 for all Model, Mediator, and Connector
						components. This is the method where each component is required to
						initialize its <code>InitializePhaseMap</code> Attribute.
					</LI>
					<LI>
						Call the optional specialization <code>ModifyInitializePhaseMap</code>
						to analyze and modify the <code>InitializePhaseMap</code> Attribute of 
						child components before the Driver uses it:
					</LI>
					<LI>
						Drive the initialize sequence for the child components.
					</LI>
				</UL>
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.IPD.IPDv04p2">
		<div class="content">
		<div class="container">
			<div class="main">
				<h1>IPDv01p2, IPDv02p2, IPDv03p2, IPDv04p2 - Modify CplList in Connectors</h1>
				<h2>Optional, Implementor Provided</h2>
				<hr />
				<p>
				During this phase, the Driver can optionally modify the CplList attribute of one or more of its Connector. Specifically,
				the CplList attribute can be modified to add connection options, such as the kind of regridding to perform.
				<br/><br/>
				The individual connection options are colon separated, leading to the following format for each CplList entry:
				<br/>
				<code>StandardName[:option1[:option2[: ...]]</code>
				<br/><br/>
				The format of the options is:
				<code>OptionName=value1[=spec1][,value2[=spec2][, ...]]</code>
				<br/><br/>
				
				<TABLE width="75%">
			
				<TR><TD ALIGN="LEFT" VALIGN="TOP" ><B>OptionName</B></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" ><B>Definition</B></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" ><B>Type</B></TD>
				<TD ALIGN="LEFT" VALIGN="TOP"><B>Values</B></TD>
				</TR>
				<TR><TD ALIGN="LEFT" VALIGN="TOP" ><TT>srcMaskValues</TT></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >List of integer values that defines the mask values.</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >multi</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >List of integers.</TD>
				</TR>
				<TR><TD ALIGN="LEFT" VALIGN="TOP" ><TT>dstMaskValues</TT></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >List of integer values that defines the mask values.</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >multi</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >List of integers.</TD>
				</TR>
				<TR><TD ALIGN="LEFT" VALIGN="TOP" ><TT>remapmethod</TT></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >Redistribution or interpolation to compute the regridding weights.</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >single</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" ><TT>redist</TT>, <TT>bilinear</TT>(default), <TT>patch</TT>, <TT>nearest_stod</TT>, <TT>nearest_dtos</TT>, <TT>conserve</TT></TD>
				</TR>
				<TR><TD ALIGN="LEFT" VALIGN="TOP"><TT>polemethod</TT></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >Extrapolation method around the pole(s).</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >single</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" ><TT>none</TT>(default), <TT>allavg</TT>, <TT>npntavg</TT>=<EM>"integer indicating number of points"</EM></TD>
				</TR>
				<TR><TD ALIGN="LEFT" VALIGN="TOP" ><TT>unmappedaction</TT></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >The action to take when unmapped destination elements are encountered.</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >single</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" ><TT>ignore</TT>(default), <TT>error</TT></TD>
				</TR>
				<TR><TD ALIGN="LEFT" VALIGN="TOP" ><TT>srcTermProcessing</TT></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >Number of terms in each partial sum of the interpolation to process on the source side. This setting impacts the bit-for-bit reproducibility of the parallel interpolation results between runs. The strictest bit-for-bit setting is achieved by setting the value to 1.</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >single</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >integer</TD>
				</TR>
				<TR><TD ALIGN="LEFT" VALIGN="TOP" ><TT>termOrder</TT></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >Order of the terms in each partial sum of the interpolation. This setting impacts the bit-for-bit reproducibility of the parallel interpolation results between runs. The strictest bit-for-bit setting is achieved by setting the value to <TT>srcseq</TT>.</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >single</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" ><TT>free</TT>(default), <TT>srcseq</TT>, <TT>srcpet</TT></TD>
				</TR>
				<TR><TD ALIGN="LEFT" VALIGN="TOP" ><TT>pipelineDepth</TT></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >Maximum number of outstanding non-blocking communication calls during the parallel interpolation. Only relevant for cases where the automatic tuning procedure fails to find a setting that works well on a given hardware.</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >single</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >integer</TD>
				</TR>
				<TR><TD ALIGN="LEFT" VALIGN="TOP" ><TT>dumpWeightsFlag</TT></TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >Enable or disable dumping of the interpolation weights into a file.</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" >single</TD>
				<TD ALIGN="LEFT" VALIGN="TOP" ><TT>true</TT>, <TT>false</TT>(default)</TD>
				</TR>
				</TABLE>
				
				</p>
			</div>
		</div>
	</div>	
	</doc>
	
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.RunPhase1">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>Run Phase 1</h1>
				<h2>(Required, NUOPC Provided)</h2>
				<hr />
				<p>
					<UL>
						<LI>
						Call the <code>SetRunClock</code> specialization.  If not overridden the default behavior is:
						If the incoming clock is valid, set the internal stop time to one time step interval on the incoming clock.
						Otherwise, leave the internal Clock stop time unchanged.
						</LI>
						<LI>
						Drive the time stepping loop, from current time to stop time, incrementing by time step.  For each step
						iteration, call child Components according to the run sequence.
						</LI>
					</UL>
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.FinalizePhase1">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>Finalize Phase 1</h1>
				<h2>(Required, NUOPC Provided)</h2>
				<hr />
				<p>
				Executes the <code>Finalize</code> method on all Connectors, Models, and Mediators. Then, if it exists, 
				calls into the <code>Finalize</code> specialization method for custom clean-up code and deallocations.
				Finally, internal data structures are deallocated.
				</p>
			</div>
		</div>	
		</div>
	</doc>
	
		
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>NUOPC Model</h1>
				<hr />
				<p>
	A NUOC Model component has a default <i>explicit</i> time dependency. Each time the Run method is called the model integrates one timeStep forward on the provided Clock. The Clock must be advanced between Run calls. The component's Run method flags incompatibility if the current time of the incoming Clock does not match the current time of the model.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	
	
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p1 
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.IPD.IPDv04p1 
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.IPD.IPDv04p1">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>IPDv00p1, IPDv01p1, IPDv02p1, IPDv03p1, IPDv04p1 - Advertise Fields</h1>
				<h2>(Required, Implementor Provided)</h2>
				<hr />

				<p>
					Advertise Fields in import/export States using
					<code>NUOPC_StateAdvertiseField()</code>
					and/or
					<code>NUOPC_StateAdvertiseFields()</code>
					.
					<br />
					<br />
					The methods above require a Standard Name for the Field, and that
					Standard Name must appear
					in the NUOPC Field Dictionary or a runtime error is generated.
					(There is an exception to this
					rule if
					<code>NUOPC_FieldDictionarySetAutoAdd</code>
					has been set to .true.)
					<br />
					<br />
					<code>NUOPC_StateAdvertiseField()</code>
					accepts a TransferOfferGeomObject argument which may be one of:
					<ul>
						<li>"will provide" (default) - The Field will provide its own
							geom object (Grid/Mesh/XGrid/LocStream)
						</li>
						<li>"can provide" - The Field can provide its own geom object,
							but only if the connected Field in the other Component will not
							provide it
						</li>
						<li>"cannot provide" - The Field cannot provide its own geom
							object. It must accept a geom object from a connected Field.
						</li>
					</ul>
					Memory is not allocated for advertised Fields, but attributes are
					set on the Field which
					can be used in later phases, especially for determining if another
					Component can provide
					and/or consume the advertised Field.
				</p>
			</div>
		</div>
	</div>
	</doc>
	

	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p2
	 	        org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.IPD.IPDv04p2">
		<div class="content">
		<div class="container">
			<div class="main">
				<h1>IPDv01p2, IPDv02p2, IPDv03p2, IPDv04p2 - <i>Unspecified by NUOPC</i></h1>
				<hr />
				<p>
					This phase is unspecified by NUOPC for Model and Mediator components.
				</p>
			</div>
		</div>
	</div>	
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p3 
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.IPD.IPDv04p3 
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.IPD.IPDv04p3">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>IPDv00p2, IPDv01p3, IPDv02p3, IPDv03p3, IPDv04p3 - Realize Fields <i>Providing</i> a Geom Object</h1>
				<h2>Required, Implementor Provided</h2>
				<hr />
				<p>
					Realize <i>connected</i> import and export Fields that have their TransferActionGeomObject attribute set to "provide", 
	i.e., that will provide their own grid structure. (This is the default value of TransferActionGeomObject.)
	<br/><br/>
	The method <code>NUOPC_StateRealizeField()</code> is used to realize a Field.
	Only previously advertised Fields can be realized and the Field's name is used to search the State for the previously advertised Field.
	
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p4
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.IPD.IPDv04p4 
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.IPD.IPDv04p4">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>IPDv03p4, IPDv04p4 - Modify Decomposition of Accepted Geom Object</h1>
				<h2>Optional, Implementor Provided</h2>
				<hr />
				<p>
				Optionally modify the decomposition and distribution information of any accepted Grids/Meshes by replacing the DistGrid. This can be accomplished
				by retrieving Grid (and its DistGrid) from the Field, creating a new DistGrid with modified decomposition, creating a new
				Grid on that DistGrid, and then using <code>ESMF_FieldEmptySet()</code> to replace the existing Grid with the new one.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p5
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.IPD.IPDv04p5 
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.IPD.IPDv04p5">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>IPDv03p5, IPDv04p5 - Realize Fields <i>Accepting</i> a Geom Object</h1>
				<h2>Required, Implementor Provided</h2>
				<hr />
				<p>
				Realize <i>connected</i> import and export Fields that have their TransferActionGeomObject attribute set to "accept", 
				i.e., that will accept a geom object from a connected Field in another Component.
				<br/><br/>
				If the generic NUOPC Connector is used, at this point the full geom object (Grid/Mesh/XGrid/LocStream) has already
				been set in the Field and only a call to <code>ESMF_FieldEmptyComplete()</code> is required to allocate memory
				for the Field.
				<br/><br/>
				The method <code>NUOPC_StateRealizeField()</code> is used to realize a Field.
				Only previously advertised Fields can be realized and the Field's name is used to search the State for the previously advertised Field.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p6">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>IPDv00p3, IPDv01p4, IPDv02p4, IPDv03p6, IPDv04p6 - Verify Connected / Set Clock</h1>
				<h2>Provided by NUOPC</h2>
				<hr />
				<p>
				If the Model's internal clock has not been set, set as a copy of the parent clock. 
				Call the <code>SetClock</code> specialization method (if present). 
				Verify all import fields are connected and set error code if not.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.IPD.IPDv04p7 
	            org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.IPD.IPDv04p7">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>IPDv00p4, IPDv01p5, IPDv02p5, IPDv03p7, IPDv04p6 - Data Initialize</h1>
				<h2>Provided by NUOPC</h2>
				<hr />
				<p>
				Call <code>DataInitialize</code> specialization method if it exists, which initializes all export fields. 
				Set timestamp in export fields to internal clock's time.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	
	<!-- 
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.Initialization">
	<![CDATA[
	<b>Initialize</b><hr/>
	<UL>
	<LI>phase 0: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
	  
	<UL>
	<LI>Initialize the <TT>InitializePhaseMap</TT> Attribute according to the NUOPC Initialize Phase Definition (IPD) version 00 (see section 2.4.2 for a precise definition), with the following mapping:
	    
	<UL>
	<LI>IPDv00p1 = phase 1: (R<SMALL>EQUIRED, </SMALL>I<SMALL>MPLEMENTOR </SMALL>P<SMALL>ROVIDED</SMALL>)
	      
	<UL>
	<LI>Advertise Fields in import and export States.
	      
	</LI>
	</UL>
	</LI>
	<LI>IPDv00p2 = phase 2: (R<SMALL>EQUIRED, </SMALL>I<SMALL>MPLEMENTOR </SMALL>P<SMALL>ROVIDED</SMALL>)
	      
	<UL>
	<LI>Realize the advertised Fields in import and export States.
	      
	</LI>
	</UL>  
	</LI>
	<LI>IPDv00p3 = phase 3: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
	      
	<UL>
	<LI>Check compatibility of the Fields' Connected status.
	      
	</LI>
	</UL>
	</LI>
	<LI>IPDv00p4 = phase 4: (R<SMALL>EQUIRED, </SMALL>NUOPC P<SMALL>ROVIDED</SMALL>)
	      
	<UL>
	<LI>Handle Field data initialization. Time stamp the export Fields.
	      
	</LI>
	</UL>
	</LI>
	</UL>
	</LI>
	</UL>  
	</LI>
	<LI>phase 3: (NUOPC P<SMALL>ROVIDED</SMALL>, suitable for: IPDv00p3, IPDv01p4, IPDv02p4)
	  
	<UL>
	<LI>If the model internal clock is found to be not set, then set the model internal clock as a copy of the incoming clock. 
	</LI>
	<LI><I>Optional specialization</I> to set the internal clock and/or alarms: <TT>label_SetClock</TT>.
	</LI>
	<LI>Check compatibility, ensuring all advertised import Fields are connected.
	  
	</LI>
	</UL>  
	</LI>
	<LI>phase 4: (NUOPC P<SMALL>ROVIDED</SMALL>, suitable for: IPDv00p4, IPDv01p5)
	  
	<UL>
	<LI><I>Optional specialization</I> to initialize export Fields: <TT>label_DataInitialize</TT>
	</LI>
	<LI>Time stamp Fields in export State for compatibility checking.
	  
	</LI>
	</UL>    
	</LI>
	<LI>phase 5: (NUOPC P<SMALL>ROVIDED</SMALL>, suitable for: IPDv02p5)
	  
	<UL>
	<LI><I>Optional specialization</I> to initialize export Fields: <TT>label_DataInitialize</TT>
	</LI>
	<LI>Timestamp Fields in export State for compatibility checking.
	</LI>
	<LI>Set Component metadata used to resolve initialize data dependencies.
	  
	</LI>
	</UL>
	</LI>
	</UL>
		
	
	]]>
	</doc>
	
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.InitP1">
	<![CDATA[
	<b>Initialize Phase 1 (IPDv00p1)</b><hr/>
	Advertise model Fields in import and export States.
	]]>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.InitP2">
	<![CDATA[
	<b>Initialize Phase 2 (IPDv00p2)</b><hr/>
	Realize the advertised Fields in import and export States.
	]]>
	</doc>
	-->
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.RunPhase1">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>Run Phase 1</h1>
				<h2>(Required, NUOPC Provided)</h2>
				<hr />

				<p>
					<UL>
						<LI>
							Call the <code>SetRunClock</code> specialization method to check and set the internal Clock against the incoming Clock.
							If a phase-specific specialization exists, call it.  Else if a phase-independent specialization exists,
							call it. If neither specialization exists, the default method will check that internal Clock and incoming Clock agree
							on current time and that the time step of the incoming Clock is a multiple of the internal Clock time step. 
							Under these	conditions set the internal stop time to one time step interval of the incoming Clock. 
							Otherwise exit with error, flagging an incompatibility.
						</LI>
						<LI>
							Call the <code>CheckImport</code> specialization method to check Import Fields. If a phase-specific method
							exists, call it. Otherwise if a phase-independent method exists, call it. If neither exist, the default
							method verifies that all Import Fields are at the current time of the internal Clock.
						</LI>
						<LI>
							Time stepping loop: starting at current time, running to stop time of the internal Clock.
							<UL>
								<LI>Timestamp the Fields in the export State according to the
									current time of the internal Clock.
								</LI>
								<LI>
									Call the <code>Advance</code> specialization method, checking first for a phase-specific method and
									then for a phase-independent method.
								</LI>
								<LI>Advance the current time of the internal Clock according to
									the	time step of the internal Clock.
								</LI>
							</UL>
						</LI>
						<LI>
							Call the <code>TimestampExport</code> specialization method to set the timestamp on Export Fields.
							If a phase-specific specialization exists, call it.  Else if a phase-independent specialization exists,
							call it.
							<!--  below only true for models, not mediators -->
							If neither specialization exists, the default method will
							timestamp all Fields in the Export State according to the
							current	time of the internal Clock, which now is identical to the stop time of the internal Clock.						
						</LI>
					</UL>
					<!-- missing specialization: AdvanceClock -->
				</p>
			</div>
		</div>
	</div>
	
	

	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.SetRunClock
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.SetRunClock
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.SetRunClock">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>SetRunClock Specialization</h1>
				<h2>(Required, NUOPC Provided, may be phase-specific)</h2>
				<hr />
				<p>
					A specialization method to check and set the internal Clock against the incoming Clock. This
					method is called by the default run phase.
					<br/><br/>
					If not overridden, the default method will check that internal Clock and incoming Clock agree
					on current time and that the time step of the incoming Clock is a multiple of the internal Clock time step. 
					Under these	conditions set the internal stop time to one time step interval of the incoming Clock. 
					Otherwise exit with error, flagging an incompatibility.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.CheckImport 
	            org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.CheckImport">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>CheckImport Specialization</h1>
				<h2>(Required, NUOPC Provided, may be phase-specific)</h2>
				<hr />
				<p>
					A specialization method to verify Import Fields before advancing in time. This method is called
					by the default run phase.
					<br/><br/>
					If not overridden, the default
					method verifies that all Import Fields are at the current time of the internal Clock.
				</p>
			</div>
		</div>
	</div>	
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.ModelAdvance 
	            org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.MediatorAdvance">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>Advance Specialization</h1>
				<h2>(Required, Implementor Provided, may be phase-specific)</h2>
				<hr />
				<p>
					A specialization method that advances the model/mediator forward in time by one timestep
					of the internal clock.  This method will be called iteratively by the default
					run phase until reaching the stop time on the internal clock.
				</p>
			</div>
		</div>
	</div>		
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.FinalizePhase1 
	            org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.FinalizePhase1">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>Finalize Phase 1</h1>
				<h2>(Required, NUOPC Provided)</h2>
				<hr />
				<p>
				If exists, calls into the <code>Finalize</code> specialization method for custom
				clean-up code and deallocations.
				</p>
			</div>
		</div>	
		</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.FinalizeModel
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCDriver.FinalizeDriver
				org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.FinalizeMediator">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>Finalize Specialization</h1>
				<h2>(Optional, Implementor Provided)</h2>
				<hr />
				<p>
				A specialization method for custom clean-up code and deallocations.
				</p>
			</div>
		</div>	
		</div>
	</doc>
	
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.SetClock">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>SetClock Specialization</h1>
				<h2>(Optional, Implementor Provided)</h2>
				<hr />
				<p>
				If present, this specialization will be called during phases IPDv00p3, IPDv01p4, IPDv02p4, IPDv03p6, and IPDv04p6.
				The specialization method can change aspects of the internal clock, which defaults to a copy of the incoming parent
				clock.  For example, the timeStep size may be changed and/or Alarms may be set on the clock.
				<br/><br/>
				The method <code>NUOPC_CompSetClock(comp, externalClock, stabilityTimeStep, rc)</code> can be used to 
				set the internal clock as a copy of externalClock, but
			    with a timeStep that is less than or equal to the stabilityTimeStep.
			    At the same time ensure that the timeStep of the external clock is
			    a multiple of the timeStep of the internal clock. If the stabilityTimeStep
			    argument is not provided then the internal clock will simply be set
			    as a copy of the external clock.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	
	<!-- 
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.SetClock"
	     url="&refurl;#setclock"/>
	-->
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCModel.DataInitialize 
	            org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.DataInitialize">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>DataInitialize Specialization</h1>
				<h2>(Optional, Implementor Provided)</h2>
				<hr />
				<p>
				If present, this specialization will be called during phases IPDv00p4, IPDv01p5, IPDv02p5, IPDv03p7, and IPDv04p6.
				The specialization method should initialize Field data in the Export State.  Fields in the Export State
				will be timestamped automatically by the calling phase, so there is no need to do it here.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>NUOPC Mediator</h1>
				<hr />
				<p>
				A NUOPC Mediator component has a default <i>explicit</i> time dependency. Each time the Run method is called, the time stamp on the imported Fields must match the current time (on both the incoming and internal clock). Before returning, the Mediator time stamps the exported Fields with the <b>same current time</b>, before advancing the internal clock one timeStep forward.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.IPD.IPDv04p6">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>IPDv00p3, IPDv01p4, IPDv02p4, IPDv03p6, IPDv04p6 - Verify Connected / Set Clock</h1>
				<h2>Provided by NUOPC</h2>
				<hr />
				<p>
				If the Mediator's internal clock has not been set, set as a copy of the parent clock. 
				Verify all import fields are connected and set error code if not.
				</p>
			</div>
		</div>
	</div>
	</doc>
	
	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.TimestampExport">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>TimestampExport Specialization</h1>
				<h2>(Optional, may be phase-specific)</h2>
				<hr />

				<p>
					A specialization method to timestamp the Fields in the Export State. This method is called
					by the default run phase after the timestepping loop when the internal clock is at the stop time.
					<br/><br/>
					If not overridden, the there is no default implementation, so the timestamp of Fields in the 
					Export State remains unchanged.
				</p>
			</div>
		</div>
	</div>	
	</doc>


	<doc class="org.earthsystemmodeling.cupid.nuopc.v7bs50.NUOPCMediator.RunPhase1">
	<div class="content">
		<div class="container">
			<div class="main">
				<h1>Run Phase 1</h1>
				<h2>(Required, NUOPC Provided)</h2>
				<hr />

				<p>
					<UL>
						<LI>
							Call the <code>SetRunClock</code> specialization method to check and set the internal Clock against the incoming Clock.
							If a phase-specific specialization exists, call it.  Else if a phase-independent specialization exists,
							call it. If neither specialization exists, the default method will check that internal Clock and incoming Clock agree
							on current time and that the time step of the incoming Clock is a multiple of the internal Clock time step. 
							Under these	conditions set the internal stop time to one time step interval of the incoming Clock. 
							Otherwise exit with error, flagging an incompatibility.
						</LI>
						<LI>
							Call the <code>CheckImport</code> specialization method to check Import Fields. If a phase-specific method
							exists, call it. Otherwise if a phase-independent method exists, call it. If neither exist, the default
							method verifies that all Import Fields are at the current time of the internal Clock.
						</LI>
						<LI>
							Time stepping loop: starting at current time, running to stop time of the internal Clock.
							<UL>
								<LI>Timestamp the Fields in the Export State according to the
									current time of the internal Clock.
								</LI>
								<LI>
									Call the <code>Advance</code> specialization method, checking first for a phase-specific method and
									then for a phase-independent method.
								</LI>
								<LI>Advance the current time of the internal Clock according to
									the	time step of the internal Clock.
								</LI>
							</UL>
						</LI>
						<LI>
							Call the <code>TimestampExport</code> specialization method to set the timestamp on Export Fields.
							If a phase-specific specialization exists, call it.  Else if a phase-independent specialization exists,
							call it.  If no specialization exists, then Export Field timestamps are left unchanged from the
							timestamping that occurs during the timestepping loop (above).
							
						</LI>
					</UL>
					<!-- missing specialization: AdvanceClock -->
				</p>
			</div>
		</div>
	</div>
	
	

	</doc>
	
	
</docs>