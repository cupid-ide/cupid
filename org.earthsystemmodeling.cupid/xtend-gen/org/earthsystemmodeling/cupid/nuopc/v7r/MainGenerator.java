package org.earthsystemmodeling.cupid.nuopc.v7r;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.io.ByteArrayInputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import org.earthsystemmodeling.cupid.NUOPC.Application;
import org.earthsystemmodeling.cupid.NUOPC.Component;
import org.earthsystemmodeling.cupid.NUOPC.Driver;
import org.earthsystemmodeling.cupid.nuopc.CodeGenerationException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Conversions;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class MainGenerator {
  public static void generateAndWrite(final Application app, final IFile toFile) {
    try {
      final String content = MainGenerator.generate(app);
      byte[] _bytes = content.getBytes();
      ByteArrayInputStream _byteArrayInputStream = new ByteArrayInputStream(_bytes);
      NullProgressMonitor _nullProgressMonitor = new NullProgressMonitor();
      toFile.setContents(_byteArrayInputStream, true, true, _nullProgressMonitor);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public static String generate(final Application app) {
    try {
      String _xblockexpression = null;
      {
        String _name = app.getName();
        boolean _equals = Objects.equal(_name, null);
        if (_equals) {
          throw new CodeGenerationException("App must have a name to generate a main program");
        }
        EList<Component> _children = app.getChildren();
        Iterable<Driver> _filter = Iterables.<Driver>filter(_children, Driver.class);
        int _size = IterableExtensions.size(_filter);
        boolean _notEquals = (_size != 1);
        if (_notEquals) {
          throw new CodeGenerationException("App must have a single driver to generate a main program");
        }
        SimpleDateFormat _simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar _instance = Calendar.getInstance();
        Date _time = _instance.getTime();
        final String timeStamp = _simpleDateFormat.format(_time);
        EList<Component> _children_1 = app.getChildren();
        Iterable<Driver> _filter_1 = Iterables.<Driver>filter(_children_1, Driver.class);
        final Driver driver = ((Driver[])Conversions.unwrapArray(_filter_1, Driver.class))[0];
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("\t\t");
        _builder.newLine();
        _builder.append("! Auto-generated main program for NUOPC Application: ");
        String _name_1 = app.getName();
        _builder.append(_name_1, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("! This main program was generated by Cupid on ");
        _builder.append(timeStamp, "");
        _builder.append(".");
        _builder.newLineIfNotEmpty();
        _builder.append("! https://earthsystemcog.org/projects/cupid/");
        _builder.newLine();
        _builder.newLine();
        _builder.append("program ");
        String _name_2 = app.getName();
        _builder.append(_name_2, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("  ");
        _builder.append("!-----------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("! NUOPC generic application driver");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("!-----------------------------------------------------------------------------");
        _builder.newLine();
        _builder.newLine();
        _builder.append("  ");
        _builder.append("use ESMF");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("use ");
        String _name_3 = driver.getName();
        _builder.append(_name_3, "  ");
        _builder.append(", only: driverSS => SetServices");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("  ");
        _builder.append("implicit none");
        _builder.newLine();
        _builder.newLine();
        _builder.append("  ");
        _builder.append("integer                 :: rc, urc");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("type(ESMF_GridComp)     :: driver");
        _builder.newLine();
        _builder.append("  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("! Initialize ESMF");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("call ESMF_Initialize(logkindflag=ESMF_LOGKIND_MULTI, & ");
        _builder.newLine();
        _builder.append("  \t");
        _builder.append("defaultCalkind=ESMF_CALKIND_GREGORIAN, rc=rc)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("call ESMF_LogWrite(\"");
        String _name_4 = driver.getName();
        _builder.append(_name_4, "  ");
        _builder.append(" STARTING\", ESMF_LOGMSG_INFO, rc=rc)");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("  ");
        _builder.append("! Create the driver Component");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("driver = ESMF_GridCompCreate(name=\"");
        String _name_5 = driver.getName();
        _builder.append(_name_5, "  ");
        _builder.append("\", rc=rc)");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("! SetServices for the driver Component");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("call ESMF_GridCompSetServices(driver, driverSS, userRc=urc, rc=rc)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=urc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("! Call Initialize for the driver Component");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("call ESMF_GridCompInitialize(driver, userRc=urc, rc=rc)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=urc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("! Call Run  for the driver Component");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("call ESMF_GridCompRun(driver, userRc=urc, rc=rc)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=urc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("! Call Finalize for the driver Component");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("call ESMF_GridCompFinalize(driver, userRc=urc, rc=rc)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=urc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("    ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("! Destroy the driver Component");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("call ESMF_GridCompDestroy(driver, rc=rc)");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.append("  ");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("call ESMF_LogWrite(\"");
        String _name_6 = driver.getName();
        _builder.append(_name_6, "  ");
        _builder.append(" FINISHED\", ESMF_LOGMSG_INFO, rc=rc)");
        _builder.newLineIfNotEmpty();
        _builder.append("  ");
        _builder.append("if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("line=__LINE__, &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("file=__FILE__)) &");
        _builder.newLine();
        _builder.append("    ");
        _builder.append("call ESMF_Finalize(endflag=ESMF_END_ABORT)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("  ");
        _builder.append("! Finalize ESMF");
        _builder.newLine();
        _builder.append("  ");
        _builder.append("call ESMF_Finalize()");
        _builder.newLine();
        _builder.append("  ");
        _builder.newLine();
        _builder.append("end program  ");
        _builder.newLine();
        _builder.newLine();
        _xblockexpression = _builder.toString();
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
