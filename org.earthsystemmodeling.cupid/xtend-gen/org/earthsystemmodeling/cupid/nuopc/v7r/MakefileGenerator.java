package org.earthsystemmodeling.cupid.nuopc.v7r;

import com.google.common.base.Objects;
import com.google.common.collect.Iterables;
import java.io.ByteArrayInputStream;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import org.earthsystemmodeling.cupid.NUOPC.Application;
import org.earthsystemmodeling.cupid.NUOPC.Component;
import org.earthsystemmodeling.cupid.NUOPC.Connector;
import org.earthsystemmodeling.cupid.NUOPC.Driver;
import org.earthsystemmodeling.cupid.nuopc.CodeGenerationException;
import org.eclipse.core.resources.IFile;
import org.eclipse.core.runtime.NullProgressMonitor;
import org.eclipse.emf.common.util.EList;
import org.eclipse.xtend2.lib.StringConcatenation;
import org.eclipse.xtext.xbase.lib.Exceptions;
import org.eclipse.xtext.xbase.lib.Functions.Function1;
import org.eclipse.xtext.xbase.lib.IterableExtensions;

@SuppressWarnings("all")
public class MakefileGenerator {
  public static void generateAndWrite(final Application app, final IFile toFile) {
    try {
      final String content = MakefileGenerator.generate(app);
      byte[] _bytes = content.getBytes();
      ByteArrayInputStream _byteArrayInputStream = new ByteArrayInputStream(_bytes);
      NullProgressMonitor _nullProgressMonitor = new NullProgressMonitor();
      toFile.setContents(_byteArrayInputStream, true, true, _nullProgressMonitor);
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
  
  public static String generate(final Application app) {
    try {
      String _xblockexpression = null;
      {
        String _name = app.getName();
        boolean _equals = Objects.equal(_name, null);
        if (_equals) {
          throw new CodeGenerationException("App must have a name to generate makefile");
        }
        SimpleDateFormat _simpleDateFormat = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss");
        Calendar _instance = Calendar.getInstance();
        Date _time = _instance.getTime();
        final String timeStamp = _simpleDateFormat.format(_time);
        StringConcatenation _builder = new StringConcatenation();
        _builder.append("# Auto-generated Makefile for NUOPC Application: ");
        String _name_1 = app.getName();
        _builder.append(_name_1, "");
        _builder.newLineIfNotEmpty();
        _builder.newLine();
        _builder.append("# This Makefile was generated by Cupid on ");
        _builder.append(timeStamp, "");
        _builder.append(".");
        _builder.newLineIfNotEmpty();
        _builder.append("# https://earthsystemcog.org/projects/cupid/");
        _builder.newLine();
        _builder.newLine();
        _builder.append("################################################################################");
        _builder.newLine();
        _builder.append("################################################################################");
        _builder.newLine();
        _builder.append("## This Makefile must be able to find the \"esmf.mk\" Makefile fragment in the  ##");
        _builder.newLine();
        _builder.append("## \'include\' line below. Following the ESMF User\'s Guide, a complete ESMF     ##");
        _builder.newLine();
        _builder.append("## installation should ensure that a single environment variable \"ESMFMKFILE\" ##");
        _builder.newLine();
        _builder.append("## is made available on the system. This variable should point to the         ##");
        _builder.newLine();
        _builder.append("## \"esmf.mk\" file.                                                            ##");
        _builder.newLine();
        _builder.append("##                                                                            ##");
        _builder.newLine();
        _builder.append("## This example Makefile uses the \"ESMFMKFILE\" environment variable.          ##");
        _builder.newLine();
        _builder.append("##                                                                            ##");
        _builder.newLine();
        _builder.append("## If you notice that this Makefile cannot find variable ESMFMKFILE then      ##");
        _builder.newLine();
        _builder.append("## please contact the person responsible for the ESMF installation on your    ##");
        _builder.newLine();
        _builder.append("## system.                                                                    ##");
        _builder.newLine();
        _builder.append("## As a work-around you can simply hardcode the path to \"esmf.mk\" in the      ##");
        _builder.newLine();
        _builder.append("## include line below. However, doing so will render this Makefile a lot less ##");
        _builder.newLine();
        _builder.append("## flexible and non-portable.                                                 ##");
        _builder.newLine();
        _builder.append("################################################################################");
        _builder.newLine();
        _builder.newLine();
        _builder.append("ifneq ($(origin ESMFMKFILE), environment)");
        _builder.newLine();
        _builder.append("$(error Environment variable ESMFMKFILE was not set.)");
        _builder.newLine();
        _builder.append("endif");
        _builder.newLine();
        _builder.newLine();
        _builder.append("include $(ESMFMKFILE)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("################################################################################");
        _builder.newLine();
        _builder.append("################################################################################");
        _builder.newLine();
        _builder.newLine();
        _builder.append(".SUFFIXES: .f90 .F90 .c .C");
        _builder.newLine();
        _builder.newLine();
        _builder.append("%.o : %.f90");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("$(ESMF_F90COMPILER) -c $(ESMF_F90COMPILEOPTS) $(ESMF_F90COMPILEPATHS) $(ESMF_F90COMPILEFREENOCPP) $<");
        _builder.newLine();
        _builder.newLine();
        _builder.append("%.o : %.F90");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("$(ESMF_F90COMPILER) -c $(ESMF_F90COMPILEOPTS) $(ESMF_F90COMPILEPATHS) $(ESMF_F90COMPILEFREECPP) $(ESMF_F90COMPILECPPFLAGS) -DESMF_VERSION_MAJOR=$(ESMF_VERSION_MAJOR) $<");
        _builder.newLine();
        _builder.newLine();
        _builder.append("%.o : %.c");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("$(ESMF_CXXCOMPILER) -c $(ESMF_CXXCOMPILEOPTS) $(ESMF_CXXCOMPILEPATHSLOCAL) $(ESMF_CXXCOMPILEPATHS) $(ESMF_CXXCOMPILECPPFLAGS) $<");
        _builder.newLine();
        _builder.newLine();
        _builder.append("%.o : %.C");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("$(ESMF_CXXCOMPILER) -c $(ESMF_CXXCOMPILEOPTS) $(ESMF_CXXCOMPILEPATHSLOCAL) $(ESMF_CXXCOMPILEPATHS) $(ESMF_CXXCOMPILECPPFLAGS) $<");
        _builder.newLine();
        _builder.newLine();
        _builder.newLine();
        _builder.append("# -----------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("all: ");
        String _name_2 = app.getName();
        _builder.append(_name_2, "");
        _builder.newLineIfNotEmpty();
        String _name_3 = app.getName();
        _builder.append(_name_3, "");
        _builder.append(": ");
        String _name_4 = app.getName();
        _builder.append(_name_4, "");
        _builder.append(".o ");
        {
          EList<Component> _allChildren = app.getAllChildren();
          final Function1<Component, Boolean> _function = new Function1<Component, Boolean>() {
            @Override
            public Boolean apply(final Component it) {
              return Boolean.valueOf((!(it instanceof Connector)));
            }
          };
          Iterable<Component> _filter = IterableExtensions.<Component>filter(_allChildren, _function);
          boolean _hasElements = false;
          for(final Component c : _filter) {
            if (!_hasElements) {
              _hasElements = true;
            } else {
              _builder.appendImmediate(" ", "");
            }
            String _name_5 = c.getName();
            _builder.append(_name_5, "");
            _builder.append(".o");
          }
        }
        _builder.newLineIfNotEmpty();
        _builder.append("\t");
        _builder.append("$(ESMF_F90LINKER) $(ESMF_F90LINKOPTS) $(ESMF_F90LINKPATHS) $(ESMF_F90LINKRPATHS) -o $@ $^ $(ESMF_F90ESMFLINKLIBS)");
        _builder.newLine();
        _builder.newLine();
        _builder.append("# module dependencies:");
        _builder.newLine();
        String _name_6 = app.getName();
        _builder.append(_name_6, "");
        _builder.append(".o: ");
        {
          EList<Component> _children = app.getChildren();
          Iterable<Driver> _filter_1 = Iterables.<Driver>filter(_children, Driver.class);
          boolean _hasElements_1 = false;
          for(final Driver d : _filter_1) {
            if (!_hasElements_1) {
              _hasElements_1 = true;
            } else {
              _builder.appendImmediate(" ", "");
            }
            String _name_7 = d.getName();
            _builder.append(_name_7, "");
            _builder.append(".o");
          }
        }
        _builder.newLineIfNotEmpty();
        {
          EList<Component> _children_1 = app.getChildren();
          Iterable<Driver> _filter_2 = Iterables.<Driver>filter(_children_1, Driver.class);
          for(final Driver d_1 : _filter_2) {
            {
              EList<Component> _children_2 = d_1.getChildren();
              int _size = _children_2.size();
              boolean _greaterThan = (_size > 0);
              if (_greaterThan) {
                String _name_8 = d_1.getName();
                _builder.append(_name_8, "");
                _builder.append(".o:  ");
                {
                  EList<Component> _children_3 = d_1.getChildren();
                  final Function1<Component, Boolean> _function_1 = new Function1<Component, Boolean>() {
                    @Override
                    public Boolean apply(final Component it) {
                      return Boolean.valueOf((!(it instanceof Connector)));
                    }
                  };
                  Iterable<Component> _filter_3 = IterableExtensions.<Component>filter(_children_3, _function_1);
                  boolean _hasElements_2 = false;
                  for(final Component c_1 : _filter_3) {
                    if (!_hasElements_2) {
                      _hasElements_2 = true;
                    } else {
                      _builder.appendImmediate(" ", "");
                    }
                    String _name_9 = c_1.getName();
                    _builder.append(_name_9, "");
                    _builder.append(".o");
                  }
                }
                _builder.newLineIfNotEmpty();
              }
            }
          }
        }
        _builder.newLine();
        _builder.newLine();
        _builder.append("# -----------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append("# -----------------------------------------------------------------------------");
        _builder.newLine();
        _builder.append(".PHONY: dust clean distclean");
        _builder.newLine();
        _builder.append("dust:");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("rm -f PET*.ESMF_LogFile");
        _builder.newLine();
        _builder.append("clean:");
        _builder.newLine();
        _builder.append("\t");
        _builder.append("rm -f ");
        String _name_10 = app.getName();
        _builder.append(_name_10, "\t");
        _builder.append(" *.o *.mod");
        _builder.newLineIfNotEmpty();
        _builder.append("distclean: dust clean");
        _builder.newLine();
        _builder.append("\t\t");
        _builder.newLine();
        _xblockexpression = _builder.toString();
      }
      return _xblockexpression;
    } catch (Throwable _e) {
      throw Exceptions.sneakyThrow(_e);
    }
  }
}
