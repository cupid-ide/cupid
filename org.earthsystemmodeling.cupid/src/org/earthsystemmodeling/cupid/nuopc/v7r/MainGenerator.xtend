package org.earthsystemmodeling.cupid.nuopc.v7r

import org.earthsystemmodeling.cupid.NUOPC.Application
import org.earthsystemmodeling.cupid.nuopc.CodeGenerationException
import java.text.SimpleDateFormat
import java.util.Calendar
import org.earthsystemmodeling.cupid.NUOPC.Driver
import org.eclipse.core.resources.IFile
import java.io.ByteArrayInputStream
import org.eclipse.core.runtime.NullProgressMonitor

class MainGenerator {
	
	def static generateAndWrite(Application app, IFile toFile) {
		val content = generate(app)
		toFile.setContents(new ByteArrayInputStream(content.bytes), true, true, new NullProgressMonitor())
	}
	
	def static String generate(Application app) {
		
		if (app.name==null) 
			throw new CodeGenerationException("App must have a name to generate a main program")
		if (app.children.filter(Driver).size() != 1)
			throw new CodeGenerationException("App must have a single driver to generate a main program")
		
		val timeStamp = new SimpleDateFormat("yyyy-MM-dd HH:mm:ss").format(Calendar.getInstance().getTime());
		val driver = app.children.filter(Driver).get(0)
		
		'''
				
		! Auto-generated main program for NUOPC Application: «app.name»
		
		! This main program was generated by Cupid on «timeStamp».
		! https://earthsystemcog.org/projects/cupid/
		
		program «app.name»
		
		  !-----------------------------------------------------------------------------
		  ! NUOPC generic application driver
		  !-----------------------------------------------------------------------------
		
		  use ESMF
		  use «driver.name», only: driverSS => SetServices
		
		  implicit none
		
		  integer                 :: rc, urc
		  type(ESMF_GridComp)     :: driver
		  
		  ! Initialize ESMF
		  call ESMF_Initialize(logkindflag=ESMF_LOGKIND_MULTI, & 
		  	defaultCalkind=ESMF_CALKIND_GREGORIAN, rc=rc)
		  if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		  
		  call ESMF_LogWrite("«driver.name» STARTING", ESMF_LOGMSG_INFO, rc=rc)
		  if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		
		  ! Create the driver Component
		  driver = ESMF_GridCompCreate(name="«driver.name»", rc=rc)
		  if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		    
		  ! SetServices for the driver Component
		  call ESMF_GridCompSetServices(driver, driverSS, userRc=urc, rc=rc)
		  if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		  if (ESMF_LogFoundError(rcToCheck=urc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		    
		  ! Call Initialize for the driver Component
		  call ESMF_GridCompInitialize(driver, userRc=urc, rc=rc)
		  if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		  if (ESMF_LogFoundError(rcToCheck=urc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		  
		  ! Call Run  for the driver Component
		  call ESMF_GridCompRun(driver, userRc=urc, rc=rc)
		  if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		  if (ESMF_LogFoundError(rcToCheck=urc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		  
		  ! Call Finalize for the driver Component
		  call ESMF_GridCompFinalize(driver, userRc=urc, rc=rc)
		  if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		  if (ESMF_LogFoundError(rcToCheck=urc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		    
		  ! Destroy the driver Component
		  call ESMF_GridCompDestroy(driver, rc=rc)
		  if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		  
		  call ESMF_LogWrite("«driver.name» FINISHED", ESMF_LOGMSG_INFO, rc=rc)
		  if (ESMF_LogFoundError(rcToCheck=rc, msg=ESMF_LOGERR_PASSTHRU, &
		    line=__LINE__, &
		    file=__FILE__)) &
		    call ESMF_Finalize(endflag=ESMF_END_ABORT)
		
		  ! Finalize ESMF
		  call ESMF_Finalize()
		  
		end program  

		'''
		
	}
	
}